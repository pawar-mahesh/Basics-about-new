#######################################
#  Step One: set up your environment  #
#######################################
Automatic way (recommended!):
-- Grab a repo with some useful scripts, and run the needed one
$ sudo apt-get install git-core
$ git clone https://github.com/akhilnarang/scripts
$ cd scripts
$ ls
$ bash setup/android_build_env.sh

-- Install build tools
$ sudo apt-get install bc bison build-essential ccache curl flex \
g++-multilib gcc-multilib git-core gnupg gperf imagemagick lib32ncurses5-dev \
lib32z-dev libc6-dev-i386 libgl1-mesa-dev libssl-dev libx11-dev \
libxml2-utils unzip x11proto-core-dev xsltproc zip zlib1g-dev


# Python version 3
# Repo is built on particular functionality from Python 2.x and is incompatible with Python 3.
# To use Repo, install Python 2.x:
#### Solution for : [/usr/bin/env: ‘python’: No such file or directory ]
## only execute when above error occurs

$ sudo apt-get install python

######################################
#  Step Two: Configure Repo and Git  #
######################################
NOTE: If you have any problems with the below commands, try running as root:
$ sudo -s

                                        Run these commands to get repo all working (only needed if you did the manual
                                        method of setup above):
                                        $ curl https://storage.googleapis.com/git-repo-downloads/repo > repo
                                        $ chmod a+x repo
                                        $ sudo install repo /usr/local/bin
                                        $ rm repo

Then run these commands to get git all working:
$ git config --global user.name "pawar-mahesh"
$ git config --global user.email "pawar.mahesh2345@gmail.com"

#####################################
#  Step Three: Download the source  #
#####################################

First, create a folder for your source:
$ mkdir ~/<foldername> (eg. mkdir ~/DU or ~/PN-Layers)
$ cd ~/<foldername>

# Clone the Source of building rom
# This is in the Source manifest file named as 'manifest' or 'android manifest'
# repo init -u "CLONE_URL" -b "BRANCH"

## Repo Initalization for Havoc and faster sync [Android 10]
# Havoc repo initialize [Android 10]
$ repo init --depth=1 -u https://github.com/Havoc-OS/android_manifest.git -b ten

# Havoc repo sync [Android 10]
$ repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags
----------------------------------------------------------------------------
# For example lets clone PE Source for Android 10.
# So the Branch will be ten for Android 10 it will be ten.

$ repo init -u https://github.com/PixelExperience/manifest -b ten
/* This is mainly present in manifest copy from there for no errors */

# Sync for sync the project
$ repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags

--------------------------------------------------------------------------------
## clone Repository

# device tree
$ git clone https://github.com/pawar-mahesh/device_xiaomi_tulip.git -b ten device/xiaomi/tulip

# sdm-660-common-device-tree
$ git clone https://github.com/pawar-mahesh/device_xiaomi_sdm660-common.git -b ten device/xiaomi/sdm660-common

# kernel
$ git clone https://github.com/pawar-mahesh/kernel_xiaomi_sdm660.git -b ten kernel/xiaomi/sdm660

# vendor
$ git clone https://github.com/pawar-mahesh/vendor_xiaomi.git -b ten vendor/xiaomi
--------------------------------------------------------------------------------

## Go to following dir
$ cd device/xiaomi/tulip

# Now lets edit the AndroidProducts.mk
$ nano AndroidP*

# Now we have to rename the
```$(LOCAL_DIR)/mk_tulip.mk``` to ```$(LOCAL_DIR)/aosp_tulip.mk```
# save and exit i.e., ctrl + X then press y and then enter.

# Now we have to rename
```mk_tulip.mk``` to ```aosp_tulip.mk```
# save and exit

# We need to edit the aosp_tulip.mk makefile
$ nano aosp_tulip.mk

# Here we need to edit some specific lines
```$(call inherit-product, vendor/mk/config/common_full_phone.mk)``` to ```$(call inherit-product, vendor/aosp/config/common_full_phone.mk)```
```PRODUCT_NAME := mk_tulip``` to ```PRODUCT_NAME := aosp_tulip```
# save and exit

# Now go Back to the Rom directory
$ cd ../../../        ## OR ##     cd ~ && cd <source_sync_dir_name>
--------------------------------------------------------------------------------
##########################
#  Step Four: Build it!  #
##########################

Open your bashrc or equivalent:
$ nano ~/.bashrc

## Change the cache directory:
# export CCACHE_DIR="Your Path to CCACHE dir"
# Append to the end of this file# 

# Add CCACHE Path
export CCACHE_EXEC=/media/mahi/nospace/.ccache
export CCACHE_DIR=/media/mahi/nospace/.ccache
export USE_CCACHE=1
export USE_CCACHE="1"


# then hit ctrl-X, Y, and enter.
$ source ~/.bashrc

After that, run this command if you used the manual method of setup above
$ prebuilts/misc/linux-x86/ccache/ccache -M 50G (or however much you want).
Run this command if you used the automatic method of setup above
$ ccache -M 50G

Since Android 10, the way of using ccache has changed:
$ export USE_CCACHE=1
$ export CCACHE_EXEC=$(command -v ccache)

## Setup environment & brunch for Havoc [Android 10]
$ . build/envsetup.sh
$ brunch

After this, load up the compilation commands:
# Set up environment
$ . build/envsetup.sh

# Choose a target [ONLY FOR PE 10]
$ lunch aosp_tulip-userdebug

# Build the code [ONLY FOR PE 10]
$ mka bacon -j$(nproc --all)

Then, tell it which device you want to make and let it roll:
$ breakfast <device> OR lunch
$ mka bacon

NOTE: Some ROMs may use their own bacon command, read their manifest as they
will usually outline this.
Others may not use mka, use make -j$( nproc --all )

Whenever you build again, make sure you run a clean build every time by placing
this command in between the other two:
$ make clobber
--------------------------------------------------------------------------------
#################
#     Upload    #
#################

## sourceforge
$ sftp mahipawar@frs.sourceforge.net

# $ cd /home/frs/project/<Project_Name>

# colt Os
$ cd /home/frs/project/ColtOS

# Havoc gapps lover 
$ cd /home/frs/project/mahi-builds/Tulip\ Havoc\ Gapps\ Lover\ Edition/

# Then find the directory of output and tyoe

$ put <Output directory with file name>

-------------------------------------------------------------------------------
#################
#  Jack issues  #
#################

For those of you who are having jack issues (like saying you ran out of memory),
follow these steps.

Type this into your terminal, substituting the # with how many GBs of RAM
you have:
$ export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx#g"

Then go into the root of the source folder and type the following:
$ ./prebuilts/sdk/tools/jack-admin kill-server
$ ./prebuilts/sdk/tools/jack-admin start-server

This will restart the jack server to reflect your new heap limit.
================================================================================
